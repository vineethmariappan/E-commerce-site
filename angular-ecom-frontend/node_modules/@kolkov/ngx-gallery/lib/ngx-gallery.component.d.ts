import { AfterViewInit, DoCheck, ElementRef, EventEmitter, OnInit } from '@angular/core';
import { NgxGalleryPreviewComponent } from './ngx-gallery-preview/ngx-gallery-preview.component';
import { NgxGalleryImageComponent } from './ngx-gallery-image/ngx-gallery-image.component';
import { NgxGalleryThumbnailsComponent } from './ngx-gallery-thumbnails/ngx-gallery-thumbnails.component';
import { SafeResourceUrl } from '@angular/platform-browser';
import { NgxGalleryOptions } from './ngx-gallery-options';
import { NgxGalleryImage } from './ngx-gallery-image';
import { NgxGalleryOrderedImage } from './ngx-gallery-ordered-image';
import * as ɵngcc0 from '@angular/core';
export declare class NgxGalleryComponent implements OnInit, DoCheck, AfterViewInit {
    private myElement;
    options: NgxGalleryOptions[];
    images: NgxGalleryImage[];
    imagesReady: EventEmitter<any>;
    change: EventEmitter<{
        index: number;
        image: NgxGalleryImage;
    }>;
    previewOpen: EventEmitter<any>;
    previewClose: EventEmitter<any>;
    previewChange: EventEmitter<{
        index: number;
        image: NgxGalleryImage;
    }>;
    smallImages: string[] | SafeResourceUrl[];
    mediumImages: NgxGalleryOrderedImage[];
    bigImages: string[] | SafeResourceUrl[];
    descriptions: string[];
    links: string[];
    labels: string[];
    oldImages: NgxGalleryImage[];
    oldImagesLength: number;
    selectedIndex: number;
    previewEnabled: boolean;
    currentOptions: NgxGalleryOptions;
    private breakpoint;
    private prevBreakpoint;
    private fullWidthTimeout;
    preview: NgxGalleryPreviewComponent;
    image: NgxGalleryImageComponent;
    thumbnails: NgxGalleryThumbnailsComponent;
    width: string;
    height: string;
    left: string;
    constructor(myElement: ElementRef);
    ngOnInit(): void;
    ngDoCheck(): void;
    ngAfterViewInit(): void;
    onResize(): void;
    getImageHeight(): string;
    getThumbnailsHeight(): string;
    getThumbnailsMarginTop(): string;
    getThumbnailsMarginBottom(): string;
    openPreview(index: number): void;
    onPreviewOpen(): void;
    onPreviewClose(): void;
    selectFromImage(index: number): void;
    selectFromThumbnails(index: number): void;
    show(index: number): void;
    showNext(): void;
    showPrev(): void;
    canShowNext(): boolean;
    canShowPrev(): boolean;
    previewSelect(index: number): void;
    moveThumbnailsRight(): void;
    moveThumbnailsLeft(): void;
    canMoveThumbnailsRight(): boolean;
    canMoveThumbnailsLeft(): boolean;
    private resetThumbnails;
    private select;
    private checkFullWidth;
    private setImages;
    private setBreakpoint;
    private sortOptions;
    private setOptions;
    private combineOptions;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxGalleryComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxGalleryComponent, "ngx-gallery", never, {
    "options": "options";
    "images": "images";
}, {
    "imagesReady": "imagesReady";
    "change": "change";
    "previewOpen": "previewOpen";
    "previewClose": "previewClose";
    "previewChange": "previewChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnkuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC1nYWxsZXJ5LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRG9DaGVjaywgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neEdhbGxlcnlQcmV2aWV3Q29tcG9uZW50IH0gZnJvbSAnLi9uZ3gtZ2FsbGVyeS1wcmV2aWV3L25neC1nYWxsZXJ5LXByZXZpZXcuY29tcG9uZW50JztcbmltcG9ydCB7IE5neEdhbGxlcnlJbWFnZUNvbXBvbmVudCB9IGZyb20gJy4vbmd4LWdhbGxlcnktaW1hZ2Uvbmd4LWdhbGxlcnktaW1hZ2UuY29tcG9uZW50JztcbmltcG9ydCB7IE5neEdhbGxlcnlUaHVtYm5haWxzQ29tcG9uZW50IH0gZnJvbSAnLi9uZ3gtZ2FsbGVyeS10aHVtYm5haWxzL25neC1nYWxsZXJ5LXRodW1ibmFpbHMuY29tcG9uZW50JztcbmltcG9ydCB7IFNhZmVSZXNvdXJjZVVybCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgTmd4R2FsbGVyeU9wdGlvbnMgfSBmcm9tICcuL25neC1nYWxsZXJ5LW9wdGlvbnMnO1xuaW1wb3J0IHsgTmd4R2FsbGVyeUltYWdlIH0gZnJvbSAnLi9uZ3gtZ2FsbGVyeS1pbWFnZSc7XG5pbXBvcnQgeyBOZ3hHYWxsZXJ5T3JkZXJlZEltYWdlIH0gZnJvbSAnLi9uZ3gtZ2FsbGVyeS1vcmRlcmVkLWltYWdlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neEdhbGxlcnlDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIERvQ2hlY2ssIEFmdGVyVmlld0luaXQge1xuICAgIHByaXZhdGUgbXlFbGVtZW50O1xuICAgIG9wdGlvbnM6IE5neEdhbGxlcnlPcHRpb25zW107XG4gICAgaW1hZ2VzOiBOZ3hHYWxsZXJ5SW1hZ2VbXTtcbiAgICBpbWFnZXNSZWFkeTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY2hhbmdlOiBFdmVudEVtaXR0ZXI8e1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICBpbWFnZTogTmd4R2FsbGVyeUltYWdlO1xuICAgIH0+O1xuICAgIHByZXZpZXdPcGVuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwcmV2aWV3Q2xvc2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHByZXZpZXdDaGFuZ2U6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIGluZGV4OiBudW1iZXI7XG4gICAgICAgIGltYWdlOiBOZ3hHYWxsZXJ5SW1hZ2U7XG4gICAgfT47XG4gICAgc21hbGxJbWFnZXM6IHN0cmluZ1tdIHwgU2FmZVJlc291cmNlVXJsW107XG4gICAgbWVkaXVtSW1hZ2VzOiBOZ3hHYWxsZXJ5T3JkZXJlZEltYWdlW107XG4gICAgYmlnSW1hZ2VzOiBzdHJpbmdbXSB8IFNhZmVSZXNvdXJjZVVybFtdO1xuICAgIGRlc2NyaXB0aW9uczogc3RyaW5nW107XG4gICAgbGlua3M6IHN0cmluZ1tdO1xuICAgIGxhYmVsczogc3RyaW5nW107XG4gICAgb2xkSW1hZ2VzOiBOZ3hHYWxsZXJ5SW1hZ2VbXTtcbiAgICBvbGRJbWFnZXNMZW5ndGg6IG51bWJlcjtcbiAgICBzZWxlY3RlZEluZGV4OiBudW1iZXI7XG4gICAgcHJldmlld0VuYWJsZWQ6IGJvb2xlYW47XG4gICAgY3VycmVudE9wdGlvbnM6IE5neEdhbGxlcnlPcHRpb25zO1xuICAgIHByaXZhdGUgYnJlYWtwb2ludDtcbiAgICBwcml2YXRlIHByZXZCcmVha3BvaW50O1xuICAgIHByaXZhdGUgZnVsbFdpZHRoVGltZW91dDtcbiAgICBwcmV2aWV3OiBOZ3hHYWxsZXJ5UHJldmlld0NvbXBvbmVudDtcbiAgICBpbWFnZTogTmd4R2FsbGVyeUltYWdlQ29tcG9uZW50O1xuICAgIHRodW1ibmFpbHM6IE5neEdhbGxlcnlUaHVtYm5haWxzQ29tcG9uZW50O1xuICAgIHdpZHRoOiBzdHJpbmc7XG4gICAgaGVpZ2h0OiBzdHJpbmc7XG4gICAgbGVmdDogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKG15RWxlbWVudDogRWxlbWVudFJlZik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBvblJlc2l6ZSgpOiB2b2lkO1xuICAgIGdldEltYWdlSGVpZ2h0KCk6IHN0cmluZztcbiAgICBnZXRUaHVtYm5haWxzSGVpZ2h0KCk6IHN0cmluZztcbiAgICBnZXRUaHVtYm5haWxzTWFyZ2luVG9wKCk6IHN0cmluZztcbiAgICBnZXRUaHVtYm5haWxzTWFyZ2luQm90dG9tKCk6IHN0cmluZztcbiAgICBvcGVuUHJldmlldyhpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBvblByZXZpZXdPcGVuKCk6IHZvaWQ7XG4gICAgb25QcmV2aWV3Q2xvc2UoKTogdm9pZDtcbiAgICBzZWxlY3RGcm9tSW1hZ2UoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgc2VsZWN0RnJvbVRodW1ibmFpbHMoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgc2hvdyhpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBzaG93TmV4dCgpOiB2b2lkO1xuICAgIHNob3dQcmV2KCk6IHZvaWQ7XG4gICAgY2FuU2hvd05leHQoKTogYm9vbGVhbjtcbiAgICBjYW5TaG93UHJldigpOiBib29sZWFuO1xuICAgIHByZXZpZXdTZWxlY3QoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgbW92ZVRodW1ibmFpbHNSaWdodCgpOiB2b2lkO1xuICAgIG1vdmVUaHVtYm5haWxzTGVmdCgpOiB2b2lkO1xuICAgIGNhbk1vdmVUaHVtYm5haWxzUmlnaHQoKTogYm9vbGVhbjtcbiAgICBjYW5Nb3ZlVGh1bWJuYWlsc0xlZnQoKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIHJlc2V0VGh1bWJuYWlscztcbiAgICBwcml2YXRlIHNlbGVjdDtcbiAgICBwcml2YXRlIGNoZWNrRnVsbFdpZHRoO1xuICAgIHByaXZhdGUgc2V0SW1hZ2VzO1xuICAgIHByaXZhdGUgc2V0QnJlYWtwb2ludDtcbiAgICBwcml2YXRlIHNvcnRPcHRpb25zO1xuICAgIHByaXZhdGUgc2V0T3B0aW9ucztcbiAgICBwcml2YXRlIGNvbWJpbmVPcHRpb25zO1xufVxuIl19