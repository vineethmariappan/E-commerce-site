import { OnInit, OnDestroy, SimpleChanges, OnChanges, ChangeDetectorRef, AfterViewChecked, EventEmitter, ElementRef } from '@angular/core';
import { ControlValueAccessor, Validator, FormControl } from '@angular/forms';
import { DropdownSettings } from './multiselect.interface';
import { ListFilterPipe } from './list-filter';
import { Item, Badge, Search } from './menu-item';
import { DataService } from './multiselect.service';
import { Subscription } from 'rxjs';
import { ChangeEvent } from './virtual-scroll';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './clickOutside';
import * as ɵngcc2 from './list-filter';
import * as ɵngcc3 from './menu-item';
import * as ɵngcc4 from './virtual-scroll';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '@angular/forms';
export declare const DROPDOWN_CONTROL_VALUE_ACCESSOR: any;
export declare const DROPDOWN_CONTROL_VALIDATION: any;
export declare class AngularMultiSelect implements OnInit, ControlValueAccessor, OnChanges, Validator, AfterViewChecked, OnDestroy {
    _elementRef: ElementRef;
    private cdr;
    private ds;
    data: Array<any>;
    settings: DropdownSettings;
    loading: boolean;
    onSelect: EventEmitter<any>;
    onDeSelect: EventEmitter<any>;
    onSelectAll: EventEmitter<Array<any>>;
    onDeSelectAll: EventEmitter<Array<any>>;
    onOpen: EventEmitter<any>;
    onClose: EventEmitter<any>;
    onScrollToEnd: EventEmitter<any>;
    onFilterSelectAll: EventEmitter<Array<any>>;
    onFilterDeSelectAll: EventEmitter<Array<any>>;
    onAddFilterNewItem: EventEmitter<any>;
    onGroupSelect: EventEmitter<any>;
    onGroupDeSelect: EventEmitter<any>;
    itemTempl: Item;
    badgeTempl: Badge;
    searchTempl: Search;
    searchInput: ElementRef;
    selectedListElem: ElementRef;
    dropdownListElem: ElementRef;
    onEscapeDown(event: KeyboardEvent): void;
    filterPipe: ListFilterPipe;
    selectedItems: Array<any>;
    isActive: boolean;
    isSelectAll: boolean;
    isFilterSelectAll: boolean;
    isInfiniteFilterSelectAll: boolean;
    groupedData: Array<any>;
    filter: any;
    chunkArray: any[];
    scrollTop: any;
    chunkIndex: any[];
    cachedItems: any[];
    groupCachedItems: any[];
    totalRows: any;
    itemHeight: any;
    screenItemsLen: any;
    cachedItemsLen: any;
    totalHeight: any;
    scroller: any;
    maxBuffer: any;
    lastScrolled: any;
    lastRepaintY: any;
    selectedListHeight: any;
    filterLength: any;
    infiniteFilterLength: any;
    viewPortItems: any;
    item: any;
    dropdownListYOffset: number;
    subscription: Subscription;
    defaultSettings: DropdownSettings;
    parseError: boolean;
    filteredList: any;
    constructor(_elementRef: ElementRef, cdr: ChangeDetectorRef, ds: DataService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    onItemClick(item: any, index: number, evt: Event): boolean;
    validate(c: FormControl): any;
    private onTouchedCallback;
    private onChangeCallback;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    trackByFn(index: number, item: any): any;
    isSelected(clickedItem: any): boolean;
    addSelected(item: any): void;
    removeSelected(clickedItem: any): void;
    toggleDropdown(evt: any): boolean;
    openDropdown(): boolean;
    closeDropdown(): void;
    closeDropdownOnClickOut(): void;
    toggleSelectAll(): void;
    filterGroupedList(): void;
    toggleFilterSelectAll(): void;
    toggleInfiniteFilterSelectAll(): void;
    clearSearch(): void;
    onFilterChange(data: any): void;
    cloneArray(arr: any): any;
    updateGroupInfo(item: any): void;
    transformData(arr: Array<any>, field: any): Array<any>;
    filterInfiniteList(evt: any): void;
    resetInfiniteSearch(): void;
    onScrollEnd(e: ChangeEvent): void;
    ngOnDestroy(): void;
    selectGroup(item: any): void;
    addFilterNewItem(): void;
    calculateDropdownDirection(): void;
    openTowardsTop(value: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularMultiSelect>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AngularMultiSelect, "angular2-multiselect", never, {
    "settings": "settings";
    "data": "data";
    "loading": "loading";
}, {
    "onSelect": "onSelect";
    "onDeSelect": "onDeSelect";
    "onSelectAll": "onSelectAll";
    "onDeSelectAll": "onDeSelectAll";
    "onOpen": "onOpen";
    "onClose": "onClose";
    "onScrollToEnd": "onScrollToEnd";
    "onFilterSelectAll": "onFilterSelectAll";
    "onFilterDeSelectAll": "onFilterDeSelectAll";
    "onAddFilterNewItem": "onAddFilterNewItem";
    "onGroupSelect": "onGroupSelect";
    "onGroupDeSelect": "onGroupDeSelect";
}, ["itemTempl", "badgeTempl", "searchTempl"]>;
}
export declare class AngularMultiSelectModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AngularMultiSelectModule, [typeof AngularMultiSelect, typeof ɵngcc1.ClickOutsideDirective, typeof ɵngcc1.ScrollDirective, typeof ɵngcc1.styleDirective, typeof ɵngcc2.ListFilterPipe, typeof ɵngcc3.Item, typeof ɵngcc3.TemplateRenderer, typeof ɵngcc3.Badge, typeof ɵngcc3.Search, typeof ɵngcc1.setPosition, typeof ɵngcc4.VirtualScrollComponent, typeof ɵngcc3.CIcon], [typeof ɵngcc5.CommonModule, typeof ɵngcc6.FormsModule], [typeof AngularMultiSelect, typeof ɵngcc1.ClickOutsideDirective, typeof ɵngcc1.ScrollDirective, typeof ɵngcc1.styleDirective, typeof ɵngcc2.ListFilterPipe, typeof ɵngcc3.Item, typeof ɵngcc3.TemplateRenderer, typeof ɵngcc3.Badge, typeof ɵngcc3.Search, typeof ɵngcc1.setPosition, typeof ɵngcc4.VirtualScrollComponent, typeof ɵngcc3.CIcon]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<AngularMultiSelectModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlzZWxlY3QuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm11bHRpc2VsZWN0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0dBOzs7O0FBRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcywgT25DaGFuZ2VzLCBDaGFuZ2VEZXRlY3RvclJlZiwgQWZ0ZXJWaWV3Q2hlY2tlZCwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yLCBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IERyb3Bkb3duU2V0dGluZ3MgfSBmcm9tICcuL211bHRpc2VsZWN0LmludGVyZmFjZSc7XG5pbXBvcnQgeyBMaXN0RmlsdGVyUGlwZSB9IGZyb20gJy4vbGlzdC1maWx0ZXInO1xuaW1wb3J0IHsgSXRlbSwgQmFkZ2UsIFNlYXJjaCB9IGZyb20gJy4vbWVudS1pdGVtJztcbmltcG9ydCB7IERhdGFTZXJ2aWNlIH0gZnJvbSAnLi9tdWx0aXNlbGVjdC5zZXJ2aWNlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ2hhbmdlRXZlbnQgfSBmcm9tICcuL3ZpcnR1YWwtc2Nyb2xsJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IERST1BET1dOX0NPTlRST0xfVkFMVUVfQUNDRVNTT1I6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IERST1BET1dOX0NPTlRST0xfVkFMSURBVElPTjogYW55O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQW5ndWxhck11bHRpU2VsZWN0IGltcGxlbWVudHMgT25Jbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25DaGFuZ2VzLCBWYWxpZGF0b3IsIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSB7XG4gICAgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBjZHI7XG4gICAgcHJpdmF0ZSBkcztcbiAgICBkYXRhOiBBcnJheTxhbnk+O1xuICAgIHNldHRpbmdzOiBEcm9wZG93blNldHRpbmdzO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgb25TZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRGVTZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uU2VsZWN0QWxsOiBFdmVudEVtaXR0ZXI8QXJyYXk8YW55Pj47XG4gICAgb25EZVNlbGVjdEFsbDogRXZlbnRFbWl0dGVyPEFycmF5PGFueT4+O1xuICAgIG9uT3BlbjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25DbG9zZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25TY3JvbGxUb0VuZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25GaWx0ZXJTZWxlY3RBbGw6IEV2ZW50RW1pdHRlcjxBcnJheTxhbnk+PjtcbiAgICBvbkZpbHRlckRlU2VsZWN0QWxsOiBFdmVudEVtaXR0ZXI8QXJyYXk8YW55Pj47XG4gICAgb25BZGRGaWx0ZXJOZXdJdGVtOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkdyb3VwU2VsZWN0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkdyb3VwRGVTZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGl0ZW1UZW1wbDogSXRlbTtcbiAgICBiYWRnZVRlbXBsOiBCYWRnZTtcbiAgICBzZWFyY2hUZW1wbDogU2VhcmNoO1xuICAgIHNlYXJjaElucHV0OiBFbGVtZW50UmVmO1xuICAgIHNlbGVjdGVkTGlzdEVsZW06IEVsZW1lbnRSZWY7XG4gICAgZHJvcGRvd25MaXN0RWxlbTogRWxlbWVudFJlZjtcbiAgICBvbkVzY2FwZURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIGZpbHRlclBpcGU6IExpc3RGaWx0ZXJQaXBlO1xuICAgIHNlbGVjdGVkSXRlbXM6IEFycmF5PGFueT47XG4gICAgaXNBY3RpdmU6IGJvb2xlYW47XG4gICAgaXNTZWxlY3RBbGw6IGJvb2xlYW47XG4gICAgaXNGaWx0ZXJTZWxlY3RBbGw6IGJvb2xlYW47XG4gICAgaXNJbmZpbml0ZUZpbHRlclNlbGVjdEFsbDogYm9vbGVhbjtcbiAgICBncm91cGVkRGF0YTogQXJyYXk8YW55PjtcbiAgICBmaWx0ZXI6IGFueTtcbiAgICBjaHVua0FycmF5OiBhbnlbXTtcbiAgICBzY3JvbGxUb3A6IGFueTtcbiAgICBjaHVua0luZGV4OiBhbnlbXTtcbiAgICBjYWNoZWRJdGVtczogYW55W107XG4gICAgZ3JvdXBDYWNoZWRJdGVtczogYW55W107XG4gICAgdG90YWxSb3dzOiBhbnk7XG4gICAgaXRlbUhlaWdodDogYW55O1xuICAgIHNjcmVlbkl0ZW1zTGVuOiBhbnk7XG4gICAgY2FjaGVkSXRlbXNMZW46IGFueTtcbiAgICB0b3RhbEhlaWdodDogYW55O1xuICAgIHNjcm9sbGVyOiBhbnk7XG4gICAgbWF4QnVmZmVyOiBhbnk7XG4gICAgbGFzdFNjcm9sbGVkOiBhbnk7XG4gICAgbGFzdFJlcGFpbnRZOiBhbnk7XG4gICAgc2VsZWN0ZWRMaXN0SGVpZ2h0OiBhbnk7XG4gICAgZmlsdGVyTGVuZ3RoOiBhbnk7XG4gICAgaW5maW5pdGVGaWx0ZXJMZW5ndGg6IGFueTtcbiAgICB2aWV3UG9ydEl0ZW1zOiBhbnk7XG4gICAgaXRlbTogYW55O1xuICAgIGRyb3Bkb3duTGlzdFlPZmZzZXQ6IG51bWJlcjtcbiAgICBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgICBkZWZhdWx0U2V0dGluZ3M6IERyb3Bkb3duU2V0dGluZ3M7XG4gICAgcGFyc2VFcnJvcjogYm9vbGVhbjtcbiAgICBmaWx0ZXJlZExpc3Q6IGFueTtcbiAgICBjb25zdHJ1Y3RvcihfZWxlbWVudFJlZjogRWxlbWVudFJlZiwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgZHM6IERhdGFTZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIG9uSXRlbUNsaWNrKGl0ZW06IGFueSwgaW5kZXg6IG51bWJlciwgZXZ0OiBFdmVudCk6IGJvb2xlYW47XG4gICAgdmFsaWRhdGUoYzogRm9ybUNvbnRyb2wpOiBhbnk7XG4gICAgcHJpdmF0ZSBvblRvdWNoZWRDYWxsYmFjaztcbiAgICBwcml2YXRlIG9uQ2hhbmdlQ2FsbGJhY2s7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xuICAgIHRyYWNrQnlGbihpbmRleDogbnVtYmVyLCBpdGVtOiBhbnkpOiBhbnk7XG4gICAgaXNTZWxlY3RlZChjbGlja2VkSXRlbTogYW55KTogYm9vbGVhbjtcbiAgICBhZGRTZWxlY3RlZChpdGVtOiBhbnkpOiB2b2lkO1xuICAgIHJlbW92ZVNlbGVjdGVkKGNsaWNrZWRJdGVtOiBhbnkpOiB2b2lkO1xuICAgIHRvZ2dsZURyb3Bkb3duKGV2dDogYW55KTogYm9vbGVhbjtcbiAgICBvcGVuRHJvcGRvd24oKTogYm9vbGVhbjtcbiAgICBjbG9zZURyb3Bkb3duKCk6IHZvaWQ7XG4gICAgY2xvc2VEcm9wZG93bk9uQ2xpY2tPdXQoKTogdm9pZDtcbiAgICB0b2dnbGVTZWxlY3RBbGwoKTogdm9pZDtcbiAgICBmaWx0ZXJHcm91cGVkTGlzdCgpOiB2b2lkO1xuICAgIHRvZ2dsZUZpbHRlclNlbGVjdEFsbCgpOiB2b2lkO1xuICAgIHRvZ2dsZUluZmluaXRlRmlsdGVyU2VsZWN0QWxsKCk6IHZvaWQ7XG4gICAgY2xlYXJTZWFyY2goKTogdm9pZDtcbiAgICBvbkZpbHRlckNoYW5nZShkYXRhOiBhbnkpOiB2b2lkO1xuICAgIGNsb25lQXJyYXkoYXJyOiBhbnkpOiBhbnk7XG4gICAgdXBkYXRlR3JvdXBJbmZvKGl0ZW06IGFueSk6IHZvaWQ7XG4gICAgdHJhbnNmb3JtRGF0YShhcnI6IEFycmF5PGFueT4sIGZpZWxkOiBhbnkpOiBBcnJheTxhbnk+O1xuICAgIGZpbHRlckluZmluaXRlTGlzdChldnQ6IGFueSk6IHZvaWQ7XG4gICAgcmVzZXRJbmZpbml0ZVNlYXJjaCgpOiB2b2lkO1xuICAgIG9uU2Nyb2xsRW5kKGU6IENoYW5nZUV2ZW50KTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHNlbGVjdEdyb3VwKGl0ZW06IGFueSk6IHZvaWQ7XG4gICAgYWRkRmlsdGVyTmV3SXRlbSgpOiB2b2lkO1xuICAgIGNhbGN1bGF0ZURyb3Bkb3duRGlyZWN0aW9uKCk6IHZvaWQ7XG4gICAgb3BlblRvd2FyZHNUb3AodmFsdWU6IGJvb2xlYW4pOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQW5ndWxhck11bHRpU2VsZWN0TW9kdWxlIHtcbn1cbiJdfQ==