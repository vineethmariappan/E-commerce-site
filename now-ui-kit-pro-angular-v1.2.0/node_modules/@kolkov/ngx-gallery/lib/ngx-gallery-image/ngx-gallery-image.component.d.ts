import { ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { DomSanitizer, SafeStyle } from '@angular/platform-browser';
import { NgxGalleryService } from '../ngx-gallery.service';
import { NgxGalleryOrderedImage } from '../ngx-gallery-ordered-image';
import { NgxGalleryAction } from '../ngx-gallery-action';
import * as ɵngcc0 from '@angular/core';
export declare class NgxGalleryImageComponent implements OnInit, OnChanges {
    private sanitization;
    private elementRef;
    private helperService;
    images: NgxGalleryOrderedImage[];
    clickable: boolean;
    selectedIndex: number;
    arrows: boolean;
    arrowsAutoHide: boolean;
    swipe: boolean;
    animation: string;
    size: string;
    arrowPrevIcon: string;
    arrowNextIcon: string;
    autoPlay: boolean;
    autoPlayInterval: number;
    autoPlayPauseOnHover: boolean;
    infinityMove: boolean;
    lazyLoading: boolean;
    actions: NgxGalleryAction[];
    descriptions: string[];
    showDescription: boolean;
    bullets: boolean;
    imageClick: EventEmitter<any>;
    activeChange: EventEmitter<any>;
    canChangeImage: boolean;
    private timer;
    constructor(sanitization: DomSanitizer, elementRef: ElementRef, helperService: NgxGalleryService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onMouseEnter(): void;
    onMouseLeave(): void;
    reset(index: number): void;
    getImages(): NgxGalleryOrderedImage[];
    startAutoPlay(): void;
    stopAutoPlay(): void;
    handleClick(event: Event, index: number): void;
    show(index: number): void;
    showNext(): boolean;
    showPrev(): void;
    setChangeTimeout(): void;
    canShowNext(): boolean;
    canShowPrev(): boolean;
    getSafeUrl(image: string): SafeStyle;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxGalleryImageComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxGalleryImageComponent, "ngx-gallery-image", never, {
    "arrows": "arrows";
    "selectedIndex": "selectedIndex";
    "images": "images";
    "clickable": "clickable";
    "arrowsAutoHide": "arrowsAutoHide";
    "swipe": "swipe";
    "animation": "animation";
    "size": "size";
    "arrowPrevIcon": "arrowPrevIcon";
    "arrowNextIcon": "arrowNextIcon";
    "autoPlay": "autoPlay";
    "autoPlayInterval": "autoPlayInterval";
    "autoPlayPauseOnHover": "autoPlayPauseOnHover";
    "infinityMove": "infinityMove";
    "lazyLoading": "lazyLoading";
    "actions": "actions";
    "descriptions": "descriptions";
    "showDescription": "showDescription";
    "bullets": "bullets";
}, {
    "imageClick": "imageClick";
    "activeChange": "activeChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnktaW1hZ2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC1nYWxsZXJ5LWltYWdlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNENBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlU3R5bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IE5neEdhbGxlcnlTZXJ2aWNlIH0gZnJvbSAnLi4vbmd4LWdhbGxlcnkuc2VydmljZSc7XG5pbXBvcnQgeyBOZ3hHYWxsZXJ5T3JkZXJlZEltYWdlIH0gZnJvbSAnLi4vbmd4LWdhbGxlcnktb3JkZXJlZC1pbWFnZSc7XG5pbXBvcnQgeyBOZ3hHYWxsZXJ5QWN0aW9uIH0gZnJvbSAnLi4vbmd4LWdhbGxlcnktYWN0aW9uJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neEdhbGxlcnlJbWFnZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIHNhbml0aXphdGlvbjtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBoZWxwZXJTZXJ2aWNlO1xuICAgIGltYWdlczogTmd4R2FsbGVyeU9yZGVyZWRJbWFnZVtdO1xuICAgIGNsaWNrYWJsZTogYm9vbGVhbjtcbiAgICBzZWxlY3RlZEluZGV4OiBudW1iZXI7XG4gICAgYXJyb3dzOiBib29sZWFuO1xuICAgIGFycm93c0F1dG9IaWRlOiBib29sZWFuO1xuICAgIHN3aXBlOiBib29sZWFuO1xuICAgIGFuaW1hdGlvbjogc3RyaW5nO1xuICAgIHNpemU6IHN0cmluZztcbiAgICBhcnJvd1ByZXZJY29uOiBzdHJpbmc7XG4gICAgYXJyb3dOZXh0SWNvbjogc3RyaW5nO1xuICAgIGF1dG9QbGF5OiBib29sZWFuO1xuICAgIGF1dG9QbGF5SW50ZXJ2YWw6IG51bWJlcjtcbiAgICBhdXRvUGxheVBhdXNlT25Ib3ZlcjogYm9vbGVhbjtcbiAgICBpbmZpbml0eU1vdmU6IGJvb2xlYW47XG4gICAgbGF6eUxvYWRpbmc6IGJvb2xlYW47XG4gICAgYWN0aW9uczogTmd4R2FsbGVyeUFjdGlvbltdO1xuICAgIGRlc2NyaXB0aW9uczogc3RyaW5nW107XG4gICAgc2hvd0Rlc2NyaXB0aW9uOiBib29sZWFuO1xuICAgIGJ1bGxldHM6IGJvb2xlYW47XG4gICAgaW1hZ2VDbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYWN0aXZlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjYW5DaGFuZ2VJbWFnZTogYm9vbGVhbjtcbiAgICBwcml2YXRlIHRpbWVyO1xuICAgIGNvbnN0cnVjdG9yKHNhbml0aXphdGlvbjogRG9tU2FuaXRpemVyLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBoZWxwZXJTZXJ2aWNlOiBOZ3hHYWxsZXJ5U2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBvbk1vdXNlRW50ZXIoKTogdm9pZDtcbiAgICBvbk1vdXNlTGVhdmUoKTogdm9pZDtcbiAgICByZXNldChpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBnZXRJbWFnZXMoKTogTmd4R2FsbGVyeU9yZGVyZWRJbWFnZVtdO1xuICAgIHN0YXJ0QXV0b1BsYXkoKTogdm9pZDtcbiAgICBzdG9wQXV0b1BsYXkoKTogdm9pZDtcbiAgICBoYW5kbGVDbGljayhldmVudDogRXZlbnQsIGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIHNob3coaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgc2hvd05leHQoKTogYm9vbGVhbjtcbiAgICBzaG93UHJldigpOiB2b2lkO1xuICAgIHNldENoYW5nZVRpbWVvdXQoKTogdm9pZDtcbiAgICBjYW5TaG93TmV4dCgpOiBib29sZWFuO1xuICAgIGNhblNob3dQcmV2KCk6IGJvb2xlYW47XG4gICAgZ2V0U2FmZVVybChpbWFnZTogc3RyaW5nKTogU2FmZVN0eWxlO1xufVxuIl19