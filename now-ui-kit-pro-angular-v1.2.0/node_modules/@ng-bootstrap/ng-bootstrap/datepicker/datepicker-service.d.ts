import { NgbCalendar, NgbPeriod } from './ngb-calendar';
import { NgbDate } from './ngb-date';
import { NgbDateStruct } from './ngb-date-struct';
import { DatepickerViewModel, NgbDayTemplateData, NgbMarkDisabled } from './datepicker-view-model';
import { Observable } from 'rxjs';
import { NgbDatepickerI18n } from './datepicker-i18n';
import * as ɵngcc0 from '@angular/core';
export declare class NgbDatepickerService {
    private _calendar;
    private _i18n;
    private _model$;
    private _select$;
    private _state;
    readonly model$: Observable<DatepickerViewModel>;
    readonly select$: Observable<NgbDate>;
    dayTemplateData: NgbDayTemplateData;
    disabled: boolean;
    displayMonths: number;
    firstDayOfWeek: number;
    focusVisible: boolean;
    maxDate: NgbDate;
    markDisabled: NgbMarkDisabled;
    minDate: NgbDate;
    navigation: 'select' | 'arrows' | 'none';
    outsideDays: 'visible' | 'collapsed' | 'hidden';
    constructor(_calendar: NgbCalendar, _i18n: NgbDatepickerI18n);
    focus(date: NgbDate): void;
    focusMove(period?: NgbPeriod, number?: number): void;
    focusSelect(): void;
    open(date: NgbDate): void;
    select(date: NgbDate, options?: {
        emitEvent?: boolean;
    }): void;
    toValidDate(date: NgbDateStruct, defaultValue?: NgbDate): NgbDate;
    private _nextState;
    private _patchContexts;
    private _updateState;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgbDatepickerService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NgbDatepickerService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImRhdGVwaWNrZXItc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOEJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdiQ2FsZW5kYXIsIE5nYlBlcmlvZCB9IGZyb20gJy4vbmdiLWNhbGVuZGFyJztcbmltcG9ydCB7IE5nYkRhdGUgfSBmcm9tICcuL25nYi1kYXRlJztcbmltcG9ydCB7IE5nYkRhdGVTdHJ1Y3QgfSBmcm9tICcuL25nYi1kYXRlLXN0cnVjdCc7XG5pbXBvcnQgeyBEYXRlcGlja2VyVmlld01vZGVsLCBOZ2JEYXlUZW1wbGF0ZURhdGEsIE5nYk1hcmtEaXNhYmxlZCB9IGZyb20gJy4vZGF0ZXBpY2tlci12aWV3LW1vZGVsJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5nYkRhdGVwaWNrZXJJMThuIH0gZnJvbSAnLi9kYXRlcGlja2VyLWkxOG4nO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdiRGF0ZXBpY2tlclNlcnZpY2Uge1xuICAgIHByaXZhdGUgX2NhbGVuZGFyO1xuICAgIHByaXZhdGUgX2kxOG47XG4gICAgcHJpdmF0ZSBfbW9kZWwkO1xuICAgIHByaXZhdGUgX3NlbGVjdCQ7XG4gICAgcHJpdmF0ZSBfc3RhdGU7XG4gICAgcmVhZG9ubHkgbW9kZWwkOiBPYnNlcnZhYmxlPERhdGVwaWNrZXJWaWV3TW9kZWw+O1xuICAgIHJlYWRvbmx5IHNlbGVjdCQ6IE9ic2VydmFibGU8TmdiRGF0ZT47XG4gICAgZGF5VGVtcGxhdGVEYXRhOiBOZ2JEYXlUZW1wbGF0ZURhdGE7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgZGlzcGxheU1vbnRoczogbnVtYmVyO1xuICAgIGZpcnN0RGF5T2ZXZWVrOiBudW1iZXI7XG4gICAgZm9jdXNWaXNpYmxlOiBib29sZWFuO1xuICAgIG1heERhdGU6IE5nYkRhdGU7XG4gICAgbWFya0Rpc2FibGVkOiBOZ2JNYXJrRGlzYWJsZWQ7XG4gICAgbWluRGF0ZTogTmdiRGF0ZTtcbiAgICBuYXZpZ2F0aW9uOiAnc2VsZWN0JyB8ICdhcnJvd3MnIHwgJ25vbmUnO1xuICAgIG91dHNpZGVEYXlzOiAndmlzaWJsZScgfCAnY29sbGFwc2VkJyB8ICdoaWRkZW4nO1xuICAgIGNvbnN0cnVjdG9yKF9jYWxlbmRhcjogTmdiQ2FsZW5kYXIsIF9pMThuOiBOZ2JEYXRlcGlja2VySTE4bik7XG4gICAgZm9jdXMoZGF0ZTogTmdiRGF0ZSk6IHZvaWQ7XG4gICAgZm9jdXNNb3ZlKHBlcmlvZD86IE5nYlBlcmlvZCwgbnVtYmVyPzogbnVtYmVyKTogdm9pZDtcbiAgICBmb2N1c1NlbGVjdCgpOiB2b2lkO1xuICAgIG9wZW4oZGF0ZTogTmdiRGF0ZSk6IHZvaWQ7XG4gICAgc2VsZWN0KGRhdGU6IE5nYkRhdGUsIG9wdGlvbnM/OiB7XG4gICAgICAgIGVtaXRFdmVudD86IGJvb2xlYW47XG4gICAgfSk6IHZvaWQ7XG4gICAgdG9WYWxpZERhdGUoZGF0ZTogTmdiRGF0ZVN0cnVjdCwgZGVmYXVsdFZhbHVlPzogTmdiRGF0ZSk6IE5nYkRhdGU7XG4gICAgcHJpdmF0ZSBfbmV4dFN0YXRlO1xuICAgIHByaXZhdGUgX3BhdGNoQ29udGV4dHM7XG4gICAgcHJpdmF0ZSBfdXBkYXRlU3RhdGU7XG59XG4iXX0=