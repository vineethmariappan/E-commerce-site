import { ElementRef, AfterViewInit, SimpleChanges, EventEmitter, OnChanges, Renderer2, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class JwBootstrapSwitchNg2Component implements AfterViewInit, ControlValueAccessor, OnChanges {
    private cd;
    private render;
    handleWidth: number;
    labelWidth: number;
    labelText: string;
    inverse: boolean;
    baseClass: string;
    onText: string;
    offText: string;
    disabled: boolean;
    readonly: boolean;
    private _focused;
    private _size;
    private _animate;
    private _innerAnimate;
    private _indeterminate;
    private _onColor;
    private _offColor;
    private _wrapperClass;
    private _innerState;
    private _innerHandleWidth;
    private _innerLabelWidth;
    private _dragStart;
    private _dragEnd;
    private _onTouchedCallback;
    private _onChangeCallback;
    changeState: EventEmitter<any>;
    container: ElementRef;
    on: ElementRef;
    label: ElementRef;
    off: ElementRef;
    private $on;
    private $off;
    private $label;
    private $container;
    /**
     * @description:  Function to set the Classes for the Wrapper Div
     * @returns string
     */
    getWrapperClasses(): string;
    /**
     * @description Function to set the css classes for #on
     * @returns string
     */
    getOnClasses(): string;
    /**
     * @description Function to set the css classes for #off
     * @returns string
     */
    getOffClasses(): string;
    /**
     * @description  Function set the marging of the #label when change the state
     * @returns string
     */
    getLabelMarginLeft(): string;
    constructor(cd: ChangeDetectorRef, render: Renderer2);
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    onClick(): void;
    onKeyDown(e: KeyboardEvent): void;
    private onDragStart;
    private onDragMove;
    private onDragEnd;
    onTouchStart(e: any): void;
    onMouseDown(e: any): void;
    onTouchMove(e: any): void;
    onMouseMove(e: any): void;
    onMouseUp(e: Event): void;
    onTouchEnd(e: Event): void;
    onMouseLeave(e: Event): void;
    onFocus(): void;
    onBlur(): void;
    /**
     * @description Function to make recalculate the size of the elements when options change
     * @param disableAnimation
     */
    private calculateWith;
    setBaseClass: string;
    setWrapperClass: string;
    setOffText: string;
    setLabelText: string;
    setOnText: string;
    setSize: string;
    setAnimate: boolean;
    setOnColor: string;
    setOffColor: string;
    setDisabled: boolean;
    setReadOnly: boolean;
    setIndeterminate: boolean;
    setInverse: boolean;
    setHandleWidth: number | 'auto';
    setLabelWidth: number | 'auto';
    value: boolean;
    private setStateValue;
    writeValue(value: boolean): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<JwBootstrapSwitchNg2Component>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<JwBootstrapSwitchNg2Component, "bSwitch", never, {
    "setBaseClass": "switch-base-class";
    "setWrapperClass": "switch-wrapper-class";
    "setOffText": "switch-off-text";
    "setLabelText": "switch-label-text";
    "setOnText": "switch-on-text";
    "setSize": "switch-size";
    "setAnimate": "switch-animate";
    "setOnColor": "switch-on-color";
    "setOffColor": "switch-off-color";
    "setDisabled": "switch-disabled";
    "setReadOnly": "switch-readonly";
    "setIndeterminate": "switch-indeterminate";
    "setInverse": "switch-inverse";
    "setHandleWidth": "switch-handle-width";
    "setLabelWidth": "switch-label-width";
}, {
    "changeState": "changeState";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianctYm9vdHN0cmFwLXN3aXRjaC1uZzIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImp3LWJvb3RzdHJhcC1zd2l0Y2gtbmcyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtR0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0LCBTaW1wbGVDaGFuZ2VzLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgUmVuZGVyZXIyLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSndCb290c3RyYXBTd2l0Y2hOZzJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25DaGFuZ2VzIHtcclxuICAgIHByaXZhdGUgY2Q7XHJcbiAgICBwcml2YXRlIHJlbmRlcjtcclxuICAgIGhhbmRsZVdpZHRoOiBudW1iZXI7XHJcbiAgICBsYWJlbFdpZHRoOiBudW1iZXI7XHJcbiAgICBsYWJlbFRleHQ6IHN0cmluZztcclxuICAgIGludmVyc2U6IGJvb2xlYW47XHJcbiAgICBiYXNlQ2xhc3M6IHN0cmluZztcclxuICAgIG9uVGV4dDogc3RyaW5nO1xyXG4gICAgb2ZmVGV4dDogc3RyaW5nO1xyXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICByZWFkb25seTogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgX2ZvY3VzZWQ7XHJcbiAgICBwcml2YXRlIF9zaXplO1xyXG4gICAgcHJpdmF0ZSBfYW5pbWF0ZTtcclxuICAgIHByaXZhdGUgX2lubmVyQW5pbWF0ZTtcclxuICAgIHByaXZhdGUgX2luZGV0ZXJtaW5hdGU7XHJcbiAgICBwcml2YXRlIF9vbkNvbG9yO1xyXG4gICAgcHJpdmF0ZSBfb2ZmQ29sb3I7XHJcbiAgICBwcml2YXRlIF93cmFwcGVyQ2xhc3M7XHJcbiAgICBwcml2YXRlIF9pbm5lclN0YXRlO1xyXG4gICAgcHJpdmF0ZSBfaW5uZXJIYW5kbGVXaWR0aDtcclxuICAgIHByaXZhdGUgX2lubmVyTGFiZWxXaWR0aDtcclxuICAgIHByaXZhdGUgX2RyYWdTdGFydDtcclxuICAgIHByaXZhdGUgX2RyYWdFbmQ7XHJcbiAgICBwcml2YXRlIF9vblRvdWNoZWRDYWxsYmFjaztcclxuICAgIHByaXZhdGUgX29uQ2hhbmdlQ2FsbGJhY2s7XHJcbiAgICBjaGFuZ2VTdGF0ZTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICBjb250YWluZXI6IEVsZW1lbnRSZWY7XHJcbiAgICBvbjogRWxlbWVudFJlZjtcclxuICAgIGxhYmVsOiBFbGVtZW50UmVmO1xyXG4gICAgb2ZmOiBFbGVtZW50UmVmO1xyXG4gICAgcHJpdmF0ZSAkb247XHJcbiAgICBwcml2YXRlICRvZmY7XHJcbiAgICBwcml2YXRlICRsYWJlbDtcclxuICAgIHByaXZhdGUgJGNvbnRhaW5lcjtcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uOiAgRnVuY3Rpb24gdG8gc2V0IHRoZSBDbGFzc2VzIGZvciB0aGUgV3JhcHBlciBEaXZcclxuICAgICAqIEByZXR1cm5zIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBnZXRXcmFwcGVyQ2xhc3NlcygpOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBGdW5jdGlvbiB0byBzZXQgdGhlIGNzcyBjbGFzc2VzIGZvciAjb25cclxuICAgICAqIEByZXR1cm5zIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBnZXRPbkNsYXNzZXMoKTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gRnVuY3Rpb24gdG8gc2V0IHRoZSBjc3MgY2xhc3NlcyBmb3IgI29mZlxyXG4gICAgICogQHJldHVybnMgc3RyaW5nXHJcbiAgICAgKi9cclxuICAgIGdldE9mZkNsYXNzZXMoKTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gIEZ1bmN0aW9uIHNldCB0aGUgbWFyZ2luZyBvZiB0aGUgI2xhYmVsIHdoZW4gY2hhbmdlIHRoZSBzdGF0ZVxyXG4gICAgICogQHJldHVybnMgc3RyaW5nXHJcbiAgICAgKi9cclxuICAgIGdldExhYmVsTWFyZ2luTGVmdCgpOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3RvcihjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIHJlbmRlcjogUmVuZGVyZXIyKTtcclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICBvbkNsaWNrKCk6IHZvaWQ7XHJcbiAgICBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIG9uRHJhZ1N0YXJ0O1xyXG4gICAgcHJpdmF0ZSBvbkRyYWdNb3ZlO1xyXG4gICAgcHJpdmF0ZSBvbkRyYWdFbmQ7XHJcbiAgICBvblRvdWNoU3RhcnQoZTogYW55KTogdm9pZDtcclxuICAgIG9uTW91c2VEb3duKGU6IGFueSk6IHZvaWQ7XHJcbiAgICBvblRvdWNoTW92ZShlOiBhbnkpOiB2b2lkO1xyXG4gICAgb25Nb3VzZU1vdmUoZTogYW55KTogdm9pZDtcclxuICAgIG9uTW91c2VVcChlOiBFdmVudCk6IHZvaWQ7XHJcbiAgICBvblRvdWNoRW5kKGU6IEV2ZW50KTogdm9pZDtcclxuICAgIG9uTW91c2VMZWF2ZShlOiBFdmVudCk6IHZvaWQ7XHJcbiAgICBvbkZvY3VzKCk6IHZvaWQ7XHJcbiAgICBvbkJsdXIoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIHRvIG1ha2UgcmVjYWxjdWxhdGUgdGhlIHNpemUgb2YgdGhlIGVsZW1lbnRzIHdoZW4gb3B0aW9ucyBjaGFuZ2VcclxuICAgICAqIEBwYXJhbSBkaXNhYmxlQW5pbWF0aW9uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2FsY3VsYXRlV2l0aDtcclxuICAgIHNldEJhc2VDbGFzczogc3RyaW5nO1xyXG4gICAgc2V0V3JhcHBlckNsYXNzOiBzdHJpbmc7XHJcbiAgICBzZXRPZmZUZXh0OiBzdHJpbmc7XHJcbiAgICBzZXRMYWJlbFRleHQ6IHN0cmluZztcclxuICAgIHNldE9uVGV4dDogc3RyaW5nO1xyXG4gICAgc2V0U2l6ZTogc3RyaW5nO1xyXG4gICAgc2V0QW5pbWF0ZTogYm9vbGVhbjtcclxuICAgIHNldE9uQ29sb3I6IHN0cmluZztcclxuICAgIHNldE9mZkNvbG9yOiBzdHJpbmc7XHJcbiAgICBzZXREaXNhYmxlZDogYm9vbGVhbjtcclxuICAgIHNldFJlYWRPbmx5OiBib29sZWFuO1xyXG4gICAgc2V0SW5kZXRlcm1pbmF0ZTogYm9vbGVhbjtcclxuICAgIHNldEludmVyc2U6IGJvb2xlYW47XHJcbiAgICBzZXRIYW5kbGVXaWR0aDogbnVtYmVyIHwgJ2F1dG8nO1xyXG4gICAgc2V0TGFiZWxXaWR0aDogbnVtYmVyIHwgJ2F1dG8nO1xyXG4gICAgdmFsdWU6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIHNldFN0YXRlVmFsdWU7XHJcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBib29sZWFuKTogdm9pZDtcclxuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XHJcbn1cclxuIl19